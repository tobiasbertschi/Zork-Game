package ch.bbw.zork;import java.util.*;/** * Class Game - the main class of the "Zork" game. * Author: Tobias Bertschi, Yves Huber */public class Game {    private Parser parser;    private Room currentRoom;    private Room entrance, dining_hall, kitchen, basement, bath, libary, study, forge, armory, prison;    private ArrayList<Item> items;    private Iterator<Item> it_items;    private Item item;    public Game() {        items = new ArrayList<Item>();        item = new Item(Item.Types.KEY, 1, "8172", "This is a Key.");        item = new Item(Item.Types.KEY, 2, "8902", "This is a Key");        item = new Item(Item.Types.KEY, 3, "8954", "This is a Key");        item = new Item(Item.Types.PAPER, 4, "tipp", "If you want to go to the bath you need the sword.");        item = new Item(Item.Types.PAPER, 5, "tipp", "The end of the game is in study.");        item = new Item(Item.Types.PAPER, 6, "tipp", "Nice work you can do it.");        item = new Item(Item.Types.WEAPON, 7, "sword", "This weapon is used to enter a room.");        item = new Item(Item.Types.WEAPON, 8, "old sword", "This weapon is used to enter a room.");        it_items = items.iterator();        parser = new Parser(System.in);        entrance = new Room("the dungeon entrance", item);        dining_hall = new Room("the gloomy dinging-hall", item);        kitchen = new Room("the medieval kitch", item);        basement = new Room("the dank basement", item);        bath = new Room("the moist bath", item);        libary = new Room("the dusty libary", item);        study = new Room("the crammed study", item);        forge = new Room("the nast forge", item);        armory = new Room("the rusty armory", item);        prison = new Room("the gruesome prison", item);        entrance.setExits(null, null, dining_hall, null);        dining_hall.setExits(entrance, bath, basement, kitchen);        kitchen.setExits(null, dining_hall, null, null);        basement.setExits(dining_hall, libary, forge, null);        bath.setExits(null, null, null, dining_hall);        libary.setExits(null, study, null, basement);        study.setExits(null, null, null, libary);        forge.setExits(basement, prison, null, armory);        armory.setExits(null, forge, null, null);        prison.setExits(null, null, null, forge);        currentRoom = entrance; // start game entrance    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a simple adventure game.");        System.out.println("Type 'items' if you want to see your items.");        System.out.println("Type 'search' if you want to pick the item.");        System.out.println("Type 'help' if you need help.");        System.out.println("Type 'quit' if you want to quit the game.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help")) {            printHelp();        } else if (commandWord.equals("go")) {            goRoom(command);        } else if (commandWord.equals("quit")) {            if (command.hasSecondWord()) {                System.out.println("Quit what?");            } else {                return true; // signal that we want to quit            }        } else if (commandWord.equals("items")) {            printItems();        } else if (commandWord.equals("search")) {            pickItems();        }        return false;    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void printItems() {        System.out.println(it_items.hasNext());        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void pickItems() {        items.add(currentRoom.getItem());        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            // Try to leave current room.            Room nextRoom = currentRoom.nextRoom(direction);/*            if (nextRoom == office) {                System.out.println("Das Fenster ist offen, brrrrrrr");            }*/            if (nextRoom == null)                System.out.println("There is no door!");            else {                currentRoom = nextRoom;                System.out.println(currentRoom.longDescription());            }        }    }}